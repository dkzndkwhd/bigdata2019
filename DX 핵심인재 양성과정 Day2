# 연습
import pandas as pd
import numpy as np

data = {'name' : ['a','b','c','d'] , 'age' : [1,2,3,4], 'score' : [12,13,14,15]}

df1 = pd.DataFrame(data)

df1

# 크롤링 연습
import requests
from bs4 import BeautifulSoup
import pandas as pd
import numpy as np


headers = {'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'}
URL = 'https://search.naver.com/search.naver?where=news&ie=utf8&sm=nws_hty&query=삼성전자'
data = requests.get(URL,headers=headers)

soup = BeautifulSoup(data.text, 'html.parser')

a = soup.select_one('#sp_nws1 > div.news_wrap.api_ani_send > div > a')
a.text

lis = soup.select('#main_pack > section > div > div.group_news > ul > li')


testlist1 = []
for li in lis:
    a = li.select_one('a.news_tit')
    print(a.text, a['href'])
    testlist1.append([a.text, a['href']])
    
dataframe1 = pd.DataFrame(testlist1)
dataframe1

# 구글 크롤링 연습
import requests
from bs4 import BeautifulSoup

# 검색어 입력 받기
search_term = '금융감독원 보도자료'

# 구글 뉴스 검색 URL
url = f"https://news.google.com/search?q={search_term}&hl=ko&gl=KR&ceid=KR%3Ako"


# HTTP 요청 보내기
response = requests.get(url)

# BeautifulSoup으로 HTML 파싱
soup = BeautifulSoup(response.content, 'html.parser')

# 뉴스 기사 링크 가져오기
articles = soup.select('a.DY5T1d')

for article in articles:
    news_title = article.text
    news_link = "https://news.google.com/" + article['href']
    print(news_title)
    print(news_link)
    
    
# 크롤링 
import requests
from bs4 import BeautifulSoup
import pandas as pd
import numpy as np
from openpyxl import Workbook

wb= Workbook()
sheet = wb.active
wb.save("샘플파일.xlsx")
wb.close()
wb = openpyxl.load_workbook('샘플파일.xlsx')  # '샘플파일.xlsx' 엑셀 파일을 불러와 wb 변수에 할당
sheet = wb['Sheet']  # wb 변수에서 'Sheet' 시트를 불러와 sheet 변수에 할당
print("!")
def get_news(keyword):

    headers = {'User-Agent' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'}
    
    URL = f'https://search.naver.com/search.naver?where=news&ie=utf8&sm=nws_hty&query={keyword}'
    data = requests.get(URL,headers=headers)

    soup = BeautifulSoup(data.text, 'html.parser')

    lis = soup.select('#main_pack > section > div > div.group_news > ul > li')
    list1 = []
    for li in lis:
        a = li.select_one('a.news_tit')
        list1.append([a.text, a['href']])
        if len(list1) == 5:
            break
    return list1
   
keywords = ['한국투자증권', '키움증권', '미래에셋증권', '삼성증권', 'KB증권']
df = pd.Dataframe[]

for i in keywords:
    dataframe1 = pd.DataFrame(get_news(i))
    df = pd.concat([df, new_df], ignore_index=True)

dataframe1 = pd.DataFrame(get_news('한국투자증권'))
sheet.append(dataframe1)
wb.save("샘플파일.xlsx")
wb.close()

print(1)

# 엑셀 불러오기 실습
from openpyxl import Workbook

wb= Workbook()
sheet = wb.active

sheet['A1'] = '안녕하세요!'

wb.save("샘플파일.xlsx")
wb.close()


# 오전 실습
#1.
my_list = ['a', 'b', 'c']

#Q 1. Print()함수를 이용해 'a' 'b' 'c' 가 출력되도록 해 보세요
for i in my_list:
    print(i)
    
#Q 2. 'b'가 출력되도록 해 보세요
print(my_list[1])

#Q 3. 'b', 'c' 가 출력되도록 해보세요, print()함수를 한 번만 사용해서요
print(my_list[1:3])

#Q 4. .append 함수를 이용해 My_list 에 'd' 를 추가해보세요
my_list.append('d')
print(my_list)

#Q 5-1. My_list의 2번 항목을 1,2,3 으로 바꿔보세요
my_list[1] = 1

#Q 5-2. My_list의 2번 항목을 1,2,3 으로 바꿔보세요
my_list2 = [1,2,3]
my_list[1] = my_list2

print(my_list)

#2.
my_dict = {'name' : '한투', 'rank' : 'No.1'}

my_dict['name']
my_dict['rank']

my_dict['name'] = '한국금융지주'
my_dict['name']

my_dict['rank'] = [1,2,1]
my_dict['rank']
my_dict['rank'][1]

a_dict = {'name' : 'John'}
b_dict = {'name' : 'Bob'}

a_list = [a_dict , b_dict]
a_list[0]
a_list[1]

a_list = []
a_list.append(a_dict)
a_list.append(b_dict)

print(a_list)

a_list.append([10,20,30])

print(a_list)

a_list.extend([10,20,30])

print(a_list)


dataset1 = {'name' : ['a','b','c','d'] , 'age' : [1,2,3,4]}

dataset1['name'][0]

#3.

def comparison(num):
    if num < 10 :
        return "한 자리"
    else :
        return "두 자리 이상"

for i in range(0,100):
    print(comparison(i))
    i = i +1
    
#4. 
def agecomparison(age):
    if age < 10:
        return "어린이입니다"
    elif age < 20:
        return "10대입니다"
    elif age < 30:
        return "20대입니다"
    elif age < 40:
        return "30대입니다"
    elif age < 50:
        return "40대입니다"
    else : 
        return "40대 이상입니다"
        
for i in range(0, 100):
    print(agecomparison(i))
    
        
        
        
# 5.
def DDea(year):
    yearlist = []
    for i in range(0, 100):
        yearlist.append(2023-i*12)
    if year in yearlist:
        return "토끼띠입니다"
    else :
        return "토끼띠가 아닙니다"
    
for i in range (1900, 2023):
    print(DDea(i))
    
    
#6. 
def multi_int(N):
    if N > 10:
        return "너무 큼"
    answer = 1
    for i in range (1,N+1):
        answer = answer * i
    return answer

for j in range (1,20):
    print(multi_int(j))
